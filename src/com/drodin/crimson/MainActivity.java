// This string is autogenerated by ChangeAppSettings.sh, do not change spaces amount
package com.drodin.crimson;

import java.io.File;
import java.io.FileOutputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import android.app.Activity;
import android.content.res.AssetManager;
import android.os.Bundle;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.Gravity;
import android.view.ViewGroup.LayoutParams;
import android.view.WindowManager;
import android.widget.LinearLayout;

import com.admob.android.ads.AdListener;
import com.admob.android.ads.AdView;


public class MainActivity extends Activity implements AdListener {

	private int adHeightPx = 48;
	private LinearLayout mMainLayout = null;
	private DemoGLSurfaceView mGLView = null;
	private static AdView mAdView = null;
	private boolean sdlInited = false;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		getWindow().setFlags(
				WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS, 
				WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS); 

		getWindow().setFlags(
				WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON,
				WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

		InstallFiles();
	}

	public void initSDL()
	{
		if(!sdlInited) {
			sdlInited = true;

			mMainLayout = new LinearLayout(getApplicationContext());
			mMainLayout.setOrientation(LinearLayout.VERTICAL);

			mGLView = new DemoGLSurfaceView(this);
			mGLView.setFocusableInTouchMode(true);
			mGLView.setFocusable(true);

			//AdManager.setTestDevices(new String[] {AdManager.TEST_EMULATOR});

			mAdView = new AdView(this);
			mAdView.setAdListener(this);
			mAdView.setGravity(Gravity.BOTTOM);

			Display mDispaly = getWindowManager().getDefaultDisplay();
			DisplayMetrics mMetrics = new DisplayMetrics();
			mDispaly.getMetrics(mMetrics);

			mMainLayout.addView(mGLView,
					new LayoutParams(mDispaly.getWidth(), 
							mDispaly.getHeight() - (int)((float)adHeightPx * mMetrics.density + 0.5f)));

			mMainLayout.addView(mAdView,
					new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.FILL_PARENT));

			setContentView(mMainLayout);

			mGLView.requestFocus();
		}
	}

	@Override
	protected void onPause() {
		super.onPause();
		if( mGLView != null ) {
			mGLView.onPause();
			mGLView.nativeResume();
		}
	}

	@Override
	protected void onResume() {
		super.onResume();
		if( mGLView != null ) {
			mGLView.onResume();
			mGLView.nativeResume();
		}
		initSDL();
	}

	@Override
	protected void onStop() 
	{
		super.onStop();
	}

	public void InstallFiles() {

		final AssetManager mAssetManager = getApplication().getResources().getAssets();

		try {
			String dir = "/sdcard/" + getPackageName() + "/";

			File fdir = new File( dir );
			if (!fdir.exists())
				fdir.mkdirs();

			ZipInputStream zs = new ZipInputStream(mAssetManager.open("files.zip",
					AssetManager.ACCESS_BUFFER));

			ZipEntry item;
			while( (item = zs.getNextEntry())!=null ) {

				if( item.isDirectory() ) {
					File newdir = new File( dir + item.getName() );
					if (!newdir.exists())
						newdir.mkdir();
				}
				else {
					File newfile = new File( dir + item.getName() );
					long filesize = item.getSize();
					if (newfile.exists() && newfile.length() == filesize)
						continue;
					byte[] tempdata = new byte[(int)filesize];
					int offset = 0;
					while (offset<filesize)
						offset += zs.read(tempdata, offset, (int)filesize-offset);
					zs.closeEntry();
					newfile.createNewFile();
					FileOutputStream fo = new FileOutputStream(newfile);
					fo.write(tempdata);
					fo.close();
				}
			}

			zs.close();   
		}
		catch(Exception e)
		{
			//noop
		}
	}

	@Override
	public void onFailedToReceiveAd(AdView arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onFailedToReceiveRefreshedAd(AdView arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onReceiveAd(AdView arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onReceiveRefreshedAd(AdView arg0) {
		// TODO Auto-generated method stub

	}

}
